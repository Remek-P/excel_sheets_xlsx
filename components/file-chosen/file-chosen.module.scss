@import "../../styles/variables/variables";
@import "../../styles/variables/breakpoints";

//--------------------------
//Outputs containers styling

.sectionContainer {

  @media (min-width: $breakpoint600) {
    padding: 10px;
  }
}

.optionContainer {
  position: relative; //for the actions menu
}

.outputsContainer {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax($grid170, 1fr));
  gap: 4px;

  @media (min-width: $breakpoint515) {
    grid-template-columns: repeat(auto-fit, minmax($grid200, 1fr));
  }

  @media (min-width: $breakpoint600) {
    grid-template-columns: repeat(auto-fit, minmax($grid255, 1fr));
    gap: 12px;
  }

  @media (min-width: $breakpoint900) {
    grid-template-columns: repeat(auto-fit, minmax($grid280, 1fr));
  }
}

.outputContainer {
  display: flex;
  flex-direction: column;
  flex-grow: 1;
}
//--------------------------
//Styling the action button in case the output container have a sibling

.sectionContainer:has( > .outputsContainer > .outputContainer:only-child) > .menuContainer {
  @media (min-width: $breakpoint380) {
    top: $actionsMenuHigh;
  }
}

.sectionContainer:has( > .outputsContainer > .outputContainer ~ .outputContainer) > .menuContainer {
  @media (min-width: $breakpoint600) and (max-width: $breakpoint700) {
    top: $actionsMenuLowest;
  }
}

.sectionContainer:has( > .outputsContainer > .outputContainer ~ .outputContainer ~ .outputContainer) > .menuContainer {
  @media (max-width: $breakpoint600) {
    top: $actionsMenuLow;
  }

  @media (min-width: $breakpoint600) and (max-width: $breakpoint1150) {
    top: $actionsMenuLowest;
  }
}

//--------------------------
//Action menu styling

.menuContainer {
  position: absolute;
  top: $actionsMenuLow;
  right: 0;

  z-index: 10;

  & > * > button {
    font-size: 0;
  }

  @media (min-width: $breakpoint800) {
    top: $actionsMenuHigh;
  }
}

.menu {

  & button {
    border-radius: $border-radius-main;
  }
}

.menuItem {
  border-radius:$border-radius-main;
}

//--------------------------
//Excluded arrays styling

.hiddenContainer {
  --_min: 160px;
  //TODO: set width, gap and min values according to output values

  margin: 0 auto;
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(var(--_min), 1fr));
  gap: 4px;
}